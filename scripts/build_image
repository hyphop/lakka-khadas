#!/bin/sh

## hyphop ##

#= build lakka for edge

. $(dirname "$0")/build.lib

Label=Lakka
LABEL=LAKKA
label=lakka

VER="3.0"

STORAGE_LIST="
    ../files/content/LAKKA_STORAGE
    ../files/content/LAKKA_STORAGE.resize
    ../files/content/LAKKA_STORAGE.roms
    ../files/content/LAKKA_STORAGE.mini
"

[ "$DEVICE" ] || \
    DEVICE=RK3399

[ "$BOARD" ] || \
    BOARD=Edge

[ "$ML" = "1" ] && \
UBOOT_TYPE=mainline

echo "[i] build $Label for $BOARD ::"
echo "[i] paths $PATH"

REPO=Lakka-LibreELEC

#[ "" ] && {
for IMG in $(ls "$DR/../../$REPO/target/$Label-$DEVICE"*.img.gz | sort -r ); do
    [ -s "$IMG" ] && break
done

[ -s "$IMG" ] || FAIL "/../../$REPO/target/*.img.gz src image not found"
#}

for IMG_ in $(ls "$DR/../../$REPO/target/$Label-$DEVICE"*.tar | sort -r ); do
    [ -s "$IMG_" ] && break
done

[ -s "$IMG_" ] || FAIL "/../../$REPO/target/*.tar src image not found"

echo "[i] build from $IMG_"

#exit 0

OUT="$TMP/lakka.build"

BOOT="$OUT/boot"
STORAGE="$OUT/storage"
mkdir -p "$DOWNLOADS"

[ -d "$BOOT" ] && rm -rf $BOOT

mkdir -p "$BOOT" || FAIL mkdir $BOOT
mkdir -p "$STORAGE" || FAIL mkdir $STORAGE

tar --list -f "$IMG_"
#rm
## KERNET SYSTEM
tar -C"$BOOT" \
    --wildcards \
    --strip-components=2 \
    -xf "$IMG_" \
    '*/target/*'

tar -C"$BOOT" \
    --wildcards \
    --strip-components=3 \
    -xf "$IMG_" \
    '*/3rdparty/bootloader/*khadas*.dtb'

#[ "" ] && {

UBOOT_TYPE=mainline
UBOOT_REL=0.11

case $BOARD in
    VIM*)
    UBOOT_FILE=$BOARD.u-boot.sd.bin
    ;;
    Edge)
    UBOOT_FILE=$BOARD.u-boot.mmc.64.bin
    UBOOT_FILE=$BOARD.u-boot.sd.bin
    ;;
esac

case $BOARD in
    VIM1)
    export DTB_FILE=/dtb/amlogic/meson-gxl-s905x-khadas-vim.dtb
    ;;
    VIM2)
    export DTB_FILE=/dtb/amlogic/meson-gxm-khadas-vim2.dtb
    ;;
    Edge)
    export DTB_FILE=/dtb/rockchip/rk3399-khadas-edge-v.dtb
    ;;
esac

[ "$DTB_FILE" ] && {
    export FDT="# FDT $DTB_FILE"
}

../scripts/download \
    https://github.com/khadas/khadas-uboot/releases/download/$UBOOT_REL/$UBOOT_FILE || FAIL download uboot

#}

UBOOT_="$DOWNLOADS/$UBOOT_FILE"


F="$OUT"/lakka.img.fat
E="$OUT"/lakka.img.ext

[ "$SUF" ] || \
    SUF=sd.mmc.img

IMAGE="$OUT/$BOARD.$Label.$VER.$SUF"

PART1_SIZE=500
export PART1_LABEL=LAKKA_BOOT

PART2_SIZE=100
export PART2_LABEL=LAKKA_STORAGE

OF=32768
BS=512

#for DTB in $(ls "$BOOT"/*.dtb 2>/dev/null ) $(ls "$BOOT"/dtb/*.dtb 2>/dev/null) "" ; do
#    [ -f "$DTB" ] && break
#done

#export DTB_FILE=/$(basename "$DTB")

echo "DTB: $DTB_FILE"

mkdir "$BOOT"/extlinux

[ -d "$BOOT"/dtb/amlogic ] || {
    mkdir -p "$BOOT"/dtb/amlogic
    mv "$BOOT"/dtb/*.dtb "$BOOT"/dtb/amlogic
}

[ -d "$BOOT"/dtb/rockchip ] || {
    mkdir -p "$BOOT"/dtb/rockchip
    mv "$BOOT"/*.dtb "$BOOT"/dtb/rockchip

}

cp "$BOOT"/dtb/rockchip/rk3399-khadas-edge.dtb \
    "$BOOT"/dtb/rockchip/rk3399-khadas-edge-v.dtb

extlinux_tpl=../files/$PROJECT/extlinux/extlinux.conf.tpl

[ -s "$extlinux_tpl" ] || FAIL extlinux tpl $extlinux_tpl

sh $extlinux_tpl | tee "$BOOT/extlinux/extlinux.conf"
cp ../files/logo/splash.bmp "$BOOT" || FAIL copy logo

grep KERNEL.gz "$BOOT/extlinux/extlinux.conf" && {
    [ -f "$BOOT"/KERNEL ] && {
    dd if="$BOOT"/KERNEL bs=64 skip=1 | lzop -dc | gzip -9c > "$BOOT"/KERNEL.gz
    rm -f "$BOOT"/KERNEL
    rm -f "$BOOT"/KERNEL.md5
    }
}

(
echo "LABEL: LAKKA"
echo "DATE: $(date)"
echo "BUILDER: hyphop"
) | tee $F.msg

CMD $dd if=/dev/zero bs=1M count=$((PART1_SIZE)) of="$F"
CMD $mkfs_vfat -n $PART1_LABEL -i DEADBEEF -m $F.msg $F
#CMD $mdir -i $F ::

(
cd $BOOT
CMD $mcopy -sp -i $F $(ls --group-directories-first .) :: 
) || FAIL copy file to fat

CMD $mdir -i $F ::

[ -s $IMAGE ] && \
rm $IMAGE

CMD $dd if=$F bs=$BS seek=$((OF)) of=$IMAGE 2>/dev/null

echo "label:dos" | $sfdisk -q $IMAGE || FAIL 1
echo "$OF, " | $sfdisk -q $IMAGE -a || FAIL 2
sfdisk --part-type $IMAGE 1 e  || FAIL 3


STORAGE_SPACE=0

for D in $STORAGE_LIST ; do

for SPACE in $(du -s -b -L "$D"); do
    break
done

STORAGE_SPACE=$((STORAGE_SPACE+SPACE))

echo "[i] ADD SPACE $SPACE -- total $STORAGE_SPACE"

done

M=$((1024*1024))

CMD $dd if=/dev/zero bs=1M count=$((PART2_SIZE+STORAGE_SPACE/M)) > $E
CMD $mkfs_ext -L $PART2_LABEL $E

#e2cp -s ../files/content/LAKKA_STORAGE/. $E:/ || FAIL copy storage content

populatefs=$(which populatefs)
DEBUGFS=$(which debugfs)
e2cp=$(which e2cp)
e2mkdir=$(which e2mkdir)
e2ln=$(which e2ln)


(
echo "COPY STORAGE"

for D in $STORAGE_LIST ; do

echo "[+] $D"

[ "$populatefs" ] && {

    echo $populatefs -U -d "$D" "$E"
    $populatefs -U -d "$D" "$E" || FAIL populate fs via populatefs
    continue
}

[ "$DEBUGFS" ] && {
    DEBUGFS=$DEBUGFS \
	"$DA"/populate-extfs.sh "$D" "$E" || FAIL populate fs via debugfs
    continue
}

[ "$e2cp" ] && {

cd $D

find -type d  | while read d ; do
    [ "$d" = "." ] && continue
    d=${d#./}
    echo "mkdir $d"
    $e2mkdir -v "$E:/$d"
done

find -type f  | while read d ; do
    d=${d#./}
    echo "cp $d"
    $e2cp -v "$d" "$E:/$d"
done

find -type l  | while read d ; do
    d=${d#./}
    l=$(readlink "$d")
    echo "ln $d -> $l"
    $e2ln -v -s  "$l" "$E:/$d"
done


cd -

}

done

)

e2ls -a $E

cat "$E" >> $IMAGE
echo "$OF, " | $sfdisk -q $IMAGE -a || FAIL 4

# copy rk uboot
RK_BOOT_OFFSET=64

[ "$UBOOT_TYPE" = "mainline" ] && {
echo "[i] write mainline uboot"

case $BOARD in
    VIM*)
    dd if=$UBOOT_ bs=444 count=1 of=$IMAGE conv=notrunc,sync
    dd if=$UBOOT_ skip=1 seek=1 of=$IMAGE conv=notrunc,sync
    ;;
    Edge)
    #dd if=$UBOOT_ seek=64 of=$IMAGE conv=notrunc,sync
    dd if=$UBOOT_ seek=64 skip=64 of=$IMAGE conv=notrunc,sync
    ;;
esac

}


[ "$UBOOT_TYPE" = "mainline" ] || {

echo "[i] write rk uboot"
gzip -dc $IMG | dd skip=64 seek=64 count=$((OF-64)) of=$IMAGE conv=notrunc,sync

}

file $IMAGE

#pigz -9c $IMAGE > $IMAGE.gz

[ "$CMP_ARGS" ] || \
    CMP_ARGS="-3"

[ "$NO_CMP" ] || \
$DA/xze "$IMAGE" $CMP_ARGS -f \
    --meta \
    LABEL=$LABEL \
    BOARD=$BOARD \
    BUILDER=hyphop \
    LINK=http://dl.khadas.com/ \
    DESC="Lakka game console for Khadas $BOARD board $ARCH" \
